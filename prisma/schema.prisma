generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum VoucherType {
  AMOUNT_DISCOUNT
  PERCENT_DISCOUNT
}

enum RedeemType {
  ORDER_VALUE
  CASHBACK
}

model Voucher {
  id                    Int         @id @default(autoincrement())
  slug                  String      @unique
  description           String
  type                  VoucherType @default(AMOUNT_DISCOUNT)
  redeemType            RedeemType  @default(ORDER_VALUE)
  campaignName          String
  validDaysOfWeek       Int[]
  status                Status      @default(ACTIVE)
  expiryDate            DateTime
  forNewUsersOnly       Boolean     @default(false)
  categories            Category[]
  timesRedeemed         Int         @default(0)
  maxRedemptions        Int?
  maxRedemptionsPerUser Int?
  percentOff            Float?
  amountOff             Float?
  maxDiscountAmount     Float?
  minOrderAmount        Float?
  metadata              Json?
  createdAt             DateTime    @default(now())
  orders                Order[]
}

enum Role {
  USER
  ADMIN
}

model Order {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  voucher       Voucher  @relation(fields: [voucherId], references: [id])
  voucherId     Int
  initialAmount Float
  finalAmount   Float
  createdAt     DateTime @default(now())
}

model User {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  role          Role    @default(USER)
  walletBalance Float   @default(0)
  orders        Order[]
  cart          Cart?
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Cart       Cart?    @relation(fields: [cartId], references: [id])
  cartId     Int?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Voucher   Voucher?  @relation(fields: [voucherId], references: [id])
  voucherId Int?
}

model Cart {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
